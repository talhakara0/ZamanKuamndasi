package com.example.zamankumandasi.ui.child

import android.app.usage.UsageEvents
import android.app.usage.UsageStatsManager
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuInflater
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.zamankumandasi.R
import com.example.zamankumandasi.data.manager.LogoutManager
import com.example.zamankumandasi.data.model.AppUsage
import com.example.zamankumandasi.databinding.FragmentChildDashboardBinding
import com.example.zamankumandasi.service.AppUsageService
import com.example.zamankumandasi.ui.UsageAccessActivity
import com.example.zamankumandasi.ui.adapter.AppUsageAdapter
import com.example.zamankumandasi.ui.viewmodel.AppUsageViewModel
import com.example.zamankumandasi.ui.viewmodel.AuthViewModel
import com.example.zamankumandasi.utils.performLogoutWithManager
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch
import javax.inject.Inject

@AndroidEntryPoint
class ChildDashboardFragment : Fragment() {

    private var _binding: FragmentChildDashboardBinding? = null
    private val binding get() = _binding!!

    private val authViewModel: AuthViewModel by viewModels()
    private val appUsageViewModel: AppUsageViewModel by viewModels()
    private lateinit var appUsageAdapter: AppUsageAdapter
    
    @Inject
    lateinit var logoutManager: LogoutManager

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentChildDashboardBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        Log.d("talha", "ChildDashboardFragment aÃ§Ä±ldÄ±")

        setHasOptionsMenu(true)
        // Network kontrol disabled - internet varken yanlÄ±ÅŸ uyarÄ± vermesin
        // checkNetworkStatus()
        setupViews()
        setupRecyclerView()
        observeCurrentUser()
        observeAppUsage()

        if (!hasUsageStatsPermission(requireContext())) {
            Log.d("talha", "KullanÄ±m izni yok, ayarlara yÃ¶nlendiriliyor")
            val intent = Intent(android.provider.Settings.ACTION_USAGE_ACCESS_SETTINGS)
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            startActivity(intent)
            Toast.makeText(
                requireContext(),
                "Uygulama kullanÄ±m izni vermelisiniz!",
                Toast.LENGTH_LONG
            ).show()
        } else {
            Log.d("talha", "KullanÄ±m izni var, servis baÅŸlatÄ±lÄ±yor")
            startAppUsageService()
        }
    }

    private fun setupViews() {
        // Toolbar'Ä± Activity'ye set et
        (requireActivity() as androidx.appcompat.app.AppCompatActivity).setSupportActionBar(binding.toolbar)
        
        // Refresh butonu
        binding.btnRefresh.setOnClickListener {
            checkAndLoadUsageData()
        }
    }
    
    private fun checkNetworkStatus() {
        // Network kontrolÃ¼ tamamen devre dÄ±ÅŸÄ± - internet var kabul ediliyor
        Log.d("ChildDashboard", "Network: âœ… Ä°nternet kontrolÃ¼ devre dÄ±ÅŸÄ± (varsayÄ±lan: baÄŸlÄ±)")
    }

    private fun setupRecyclerView() {
        appUsageAdapter = AppUsageAdapter(
            onAppClick = { appUsage ->
                // Uygulama kullanÄ±m detayÄ±na git
            }
        )

        binding.rvAppUsage.apply {
            adapter = appUsageAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun observeCurrentUser() {
        authViewModel.currentUser.observe(viewLifecycleOwner) { user ->
            Log.d("talha", "observeCurrentUser: user = $user")
            user?.let {
                binding.tvUserEmail.text = it.email
                binding.tvParentInfo.text = "Ebeveyn ID: ${it.parentId ?: "HenÃ¼z eÅŸleÅŸtirilmedi"}"
                appUsageViewModel.loadAppUsageByUser(it.id)
            }
        }
    }

    /**
     * QueryEvents tabanlÄ± kullanÄ±m Ã¶lÃ§Ã¼mÃ¼ - Ä°yileÅŸtirilmiÅŸ versiyon
     */
    private fun checkAndLoadUsageData() {
        Log.d("talha", "Yenile butonuna basÄ±ldÄ±, usage verisi toplanÄ±yor")
        val usageStatsManager =
            requireContext().getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager

        val endTime = System.currentTimeMillis()
        val startTime = endTime - 24 * 60 * 60 * 1000 // Son 24 saat

        // Ã–nce UsageStats ile gÃ¼nlÃ¼k toplam kullanÄ±m verilerini al (daha gÃ¼venilir)
        val usageStats = usageStatsManager.queryUsageStats(
            UsageStatsManager.INTERVAL_DAILY,
            startTime,
            endTime
        )

        val usageMap = mutableMapOf<String, Long>()
        
        // UsageStats'tan toplam kullanÄ±m sÃ¼relerini al
        usageStats.forEach { stats ->
            if (stats.totalTimeInForeground > 0) {
                usageMap[stats.packageName] = stats.totalTimeInForeground // Bu zaten milisaniye cinsinden
                Log.d("talha", "${stats.packageName}: ${stats.totalTimeInForeground}ms (${stats.totalTimeInForeground/1000/60}dk)")
            }
        }

        // Ek olarak Events ile eksik verileri tamamla
        val usageEvents = usageStatsManager.queryEvents(startTime, endTime)
        var lastEventTimeMap = mutableMapOf<String, Long>()

        while (usageEvents.hasNextEvent()) {
            val event = UsageEvents.Event()
            usageEvents.getNextEvent(event)

            when (event.eventType) {
                UsageEvents.Event.ACTIVITY_RESUMED -> {
                    lastEventTimeMap[event.packageName] = event.timeStamp
                }
                UsageEvents.Event.ACTIVITY_PAUSED -> {
                    val start = lastEventTimeMap[event.packageName]
                    if (start != null) {
                        val duration = event.timeStamp - start // Milisaniye cinsinden
                        // Sadece UsageStats'ta olmayan uygulamalar iÃ§in event verisi kullan
                        if (!usageMap.containsKey(event.packageName)) {
                            usageMap[event.packageName] = usageMap.getOrDefault(event.packageName, 0) + duration
                        }
                        lastEventTimeMap.remove(event.packageName)
                    }
                }
                UsageEvents.Event.SCREEN_NON_INTERACTIVE -> {
                    // Ekran kapanÄ±nca aÃ§Ä±k kalan uygulamalarÄ± da hesapla
                    lastEventTimeMap.forEach { (pkg, startTime) ->
                        val duration = event.timeStamp - startTime
                        if (duration > 0 && !usageMap.containsKey(pkg)) {
                            usageMap[pkg] = usageMap.getOrDefault(pkg, 0) + duration
                        }
                    }
                    lastEventTimeMap.clear()
                }
            }
        }

        // Hala aÃ§Ä±k olan uygulamalarÄ± hesapla
        lastEventTimeMap.forEach { (pkg, startTime) ->
            val duration = endTime - startTime
            if (duration > 0 && !usageMap.containsKey(pkg)) {
                usageMap[pkg] = usageMap.getOrDefault(pkg, 0) + duration
            }
        }

        Log.d("talha", "Toplam uygulama sayÄ±sÄ±: ${usageMap.size}")
        usageMap.forEach { (pkg, time) ->
            Log.d("talha", "$pkg: ${time}ms (${time/1000/60}dk)")
        }

        // Minimum kullanÄ±m sÃ¼resi filtresi (30 saniyeden az olanlarÄ± hariÃ§ tut)
        val filteredUsageMap = usageMap.filter { it.value >= 30000 } // 30 saniye = 30000ms

        val usageList = filteredUsageMap.map { (pkg, dur) ->
            AppUsage(
                appName = getAppNameFromPackage(requireContext(), pkg),
                packageName = pkg,
                usedTime = dur // ArtÄ±k milisaniye cinsinden
            )
        }

        // ğŸ”¹ RTDB'ye yaz (her uygulama iÃ§in) - AkÄ±llÄ± veri birleÅŸtirme ile
        authViewModel.currentUser.value?.let { user ->
            usageList.forEach { appUsage ->
                val safePackageName = appUsage.packageName.replace(".", "_")
                val appUsageToSave = appUsage.copy(
                    userId = user.id,
                    id = "${user.id}_$safePackageName",
                    lastUsed = System.currentTimeMillis()
                )
                Log.d("talha", "Firebase'e yazÄ±lÄ±yor: $appUsageToSave")
                lifecycleScope.launch {
                    try {
                        // Mevcut veriyi al ve gÃ¼nlÃ¼k maksimum kullanÄ±m ile birleÅŸtir
                        val existingUsage = appUsageViewModel.getAppUsageByPackage(user.id, appUsage.packageName)
                        val finalAppUsage = if (existingUsage != null) {
                            // GÃ¼nlÃ¼k toplam kullanÄ±m sÃ¼resinin en bÃ¼yÃ¼k deÄŸerini al (kullanÄ±m geri gitmez)
                            val today = System.currentTimeMillis() / (24 * 60 * 60 * 1000)
                            val lastUsedDay = existingUsage.lastUsed / (24 * 60 * 60 * 1000)
                            
                            if (today == lastUsedDay) {
                                // AynÄ± gÃ¼n - maksimum kullanÄ±m sÃ¼resini kullan
                                existingUsage.copy(
                                    usedTime = maxOf(existingUsage.usedTime, appUsage.usedTime),
                                    lastUsed = System.currentTimeMillis(),
                                    isBlocked = maxOf(existingUsage.usedTime, appUsage.usedTime) >= existingUsage.dailyLimit && existingUsage.dailyLimit > 0
                                )
                            } else {
                                // Yeni gÃ¼n - kullanÄ±m sÃ¼resini sÄ±fÄ±rla
                                existingUsage.copy(
                                    usedTime = appUsage.usedTime,
                                    lastUsed = System.currentTimeMillis(),
                                    isBlocked = appUsage.usedTime >= existingUsage.dailyLimit && existingUsage.dailyLimit > 0
                                )
                            }
                        } else {
                            appUsageToSave
                        }
                        
                        appUsageViewModel.saveAppUsage(finalAppUsage)
                        Log.d("talha", "Firebase'e yazma baÅŸarÄ±lÄ±: ${finalAppUsage.id} - ${finalAppUsage.usedTime}ms")
                    } catch (e: Exception) {
                        Log.e("talha", "Firebase'e yazma hatasÄ±: ${e.message}")
                    }
                }
            }
        } ?: Log.e("talha", "KullanÄ±cÄ± null, Firebase'e yazÄ±lamadÄ±!")

        // KullanÄ±m sÃ¼resine gÃ¶re azalan ÅŸekilde sÄ±rala
        val sortedUsageList = usageList.sortedByDescending { it.usedTime }

        // Ana thread'de adapter'e bas
        activity?.runOnUiThread {
            appUsageAdapter.submitList(sortedUsageList)
        }
    }

    // ğŸ”¹ Paket adÄ±ndan uygulama adÄ±nÄ± alma fonksiyonu
    private fun getAppNameFromPackage(context: Context, packageName: String): String {
        return try {
            val pm = context.packageManager
            val appInfo = pm.getApplicationInfo(packageName, 0)
            pm.getApplicationLabel(appInfo).toString()
        } catch (e: Exception) {
            packageName
        }
    }

    private fun observeAppUsage() {
        appUsageViewModel.appUsageList.observe(viewLifecycleOwner) { usageList ->
            if (usageList.isNotEmpty()) {
                binding.tvNoUsage.visibility = View.GONE
                appUsageAdapter.submitList(usageList)
                Log.d("talha", "UI'ya ${usageList.size} uygulama yÃ¼klendi")
            } else {
                binding.tvNoUsage.visibility = View.VISIBLE
                Log.d("talha", "UI'da kullanÄ±m verisi yok")
            }
        }

        appUsageViewModel.loading.observe(viewLifecycleOwner) { isLoading ->
            binding.progressBar.visibility = if (isLoading) View.VISIBLE else View.GONE
        }
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        Log.d("talha", "ChildDashboard: Menu oluÅŸturuluyor")
        inflater.inflate(R.menu.menu_child_dashboard, menu)
        Log.d("talha", "ChildDashboard: Menu yÃ¼klendi, item sayÄ±sÄ±: ${menu.size()}")
        super.onCreateOptionsMenu(menu, inflater)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        Log.d("talha", "ChildDashboard: Menu item tÄ±klandÄ±: ${item.itemId}")
        return when (item.itemId) {
            R.id.action_logout -> {
                Log.d("talha", "ChildDashboard: Ã‡Ä±kÄ±ÅŸ menu item seÃ§ildi")
                performLogoutWithManager(authViewModel, logoutManager)
                true
            }

            else -> super.onOptionsItemSelected(item)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    private fun startAppUsageService() {
        val usageStatsManager =
            requireContext().getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager
        val currentTime = System.currentTimeMillis()
        val startTime = currentTime - (24 * 60 * 60 * 1000)

        try {
            val queryUsageStats = usageStatsManager.queryUsageStats(
                UsageStatsManager.INTERVAL_DAILY,
                startTime,
                currentTime
            )

            Log.d("talha", "Usage Access kontrolÃ¼: ${queryUsageStats.size} uygulama bulundu")

            if (queryUsageStats.isEmpty()) {
                val intent = Intent(requireContext(), UsageAccessActivity::class.java)
                startActivity(intent)
            } else {
                val intent = Intent(requireContext(), AppUsageService::class.java).apply {
                    action = "START_TRACKING"
                }
                requireContext().startService(intent)

                authViewModel.currentUser.value?.let { user ->
                    checkAndLoadUsageData()
                }
            }
        } catch (e: Exception) {
            Log.d("talha", "Usage Access hatasÄ±: ${e.message}")
            e.printStackTrace()
        }
    }

    private fun hasUsageStatsPermission(context: Context): Boolean {
        val appOps = context.getSystemService(Context.APP_OPS_SERVICE) as android.app.AppOpsManager
        val mode = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
            appOps.unsafeCheckOpNoThrow(
                "android:get_usage_stats",
                android.os.Process.myUid(),
                context.packageName
            )
        } else {
            appOps.checkOpNoThrow(
                "android:get_usage_stats",
                android.os.Process.myUid(),
                context.packageName
            )
        }
        return mode == android.app.AppOpsManager.MODE_ALLOWED
    }
}
